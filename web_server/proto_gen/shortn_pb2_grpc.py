# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import shortn_pb2 as shortn__pb2


class ShortnStub(object):
    """The Shortn service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddPageRpc = channel.unary_unary(
                '/shortn.Shortn/AddPageRpc',
                request_serializer=shortn__pb2.AddPageRequest.SerializeToString,
                response_deserializer=shortn__pb2.AddPageResponse.FromString,
                )


class ShortnServicer(object):
    """The Shortn service definition.
    """

    def AddPageRpc(self, request, context):
        """Add page.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShortnServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddPageRpc': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPageRpc,
                    request_deserializer=shortn__pb2.AddPageRequest.FromString,
                    response_serializer=shortn__pb2.AddPageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shortn.Shortn', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Shortn(object):
    """The Shortn service definition.
    """

    @staticmethod
    def AddPageRpc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shortn.Shortn/AddPageRpc',
            shortn__pb2.AddPageRequest.SerializeToString,
            shortn__pb2.AddPageResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
