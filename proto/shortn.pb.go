// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/shortn.proto

package shortn

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the rawurl to be shortened.
type AddPageRequest struct {
	RawUrl               string   `protobuf:"bytes,1,opt,name=raw_url,json=rawUrl,proto3" json:"raw_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPageRequest) Reset()         { *m = AddPageRequest{} }
func (m *AddPageRequest) String() string { return proto.CompactTextString(m) }
func (*AddPageRequest) ProtoMessage()    {}
func (*AddPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_097b1401e018cccf, []int{0}
}

func (m *AddPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPageRequest.Unmarshal(m, b)
}
func (m *AddPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPageRequest.Marshal(b, m, deterministic)
}
func (m *AddPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPageRequest.Merge(m, src)
}
func (m *AddPageRequest) XXX_Size() int {
	return xxx_messageInfo_AddPageRequest.Size(m)
}
func (m *AddPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPageRequest proto.InternalMessageInfo

func (m *AddPageRequest) GetRawUrl() string {
	if m != nil {
		return m.RawUrl
	}
	return ""
}

// The response message containing the shorten url.
type AddPageResponse struct {
	ShortUrl             string   `protobuf:"bytes,1,opt,name=short_url,json=shortUrl,proto3" json:"short_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPageResponse) Reset()         { *m = AddPageResponse{} }
func (m *AddPageResponse) String() string { return proto.CompactTextString(m) }
func (*AddPageResponse) ProtoMessage()    {}
func (*AddPageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_097b1401e018cccf, []int{1}
}

func (m *AddPageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPageResponse.Unmarshal(m, b)
}
func (m *AddPageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPageResponse.Marshal(b, m, deterministic)
}
func (m *AddPageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPageResponse.Merge(m, src)
}
func (m *AddPageResponse) XXX_Size() int {
	return xxx_messageInfo_AddPageResponse.Size(m)
}
func (m *AddPageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPageResponse proto.InternalMessageInfo

func (m *AddPageResponse) GetShortUrl() string {
	if m != nil {
		return m.ShortUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*AddPageRequest)(nil), "shortn.AddPageRequest")
	proto.RegisterType((*AddPageResponse)(nil), "shortn.AddPageResponse")
}

func init() {
	proto.RegisterFile("proto/shortn.proto", fileDescriptor_097b1401e018cccf)
}

var fileDescriptor_097b1401e018cccf = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xce, 0xc8, 0x2f, 0x2a, 0xc9, 0xd3, 0x03, 0x73, 0x84, 0xd8, 0x20, 0x3c, 0x25,
	0x4d, 0x2e, 0x3e, 0xc7, 0x94, 0x94, 0x80, 0xc4, 0xf4, 0xd4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2,
	0x12, 0x21, 0x71, 0x2e, 0xf6, 0xa2, 0xc4, 0xf2, 0xf8, 0xd2, 0xa2, 0x1c, 0x09, 0x46, 0x05, 0x46,
	0x0d, 0xce, 0x20, 0xb6, 0xa2, 0xc4, 0xf2, 0xd0, 0xa2, 0x1c, 0x25, 0x3d, 0x2e, 0x7e, 0xb8, 0xd2,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x69, 0x2e, 0x4e, 0xb0, 0x39, 0x48, 0xaa, 0x39, 0xc0,
	0x02, 0xa1, 0x45, 0x39, 0x46, 0x9e, 0x5c, 0x6c, 0xc1, 0x60, 0x4b, 0x84, 0xec, 0xb9, 0xb8, 0x60,
	0x3a, 0x0b, 0x92, 0x85, 0xc4, 0xf4, 0xa0, 0x2e, 0x41, 0xb5, 0x58, 0x4a, 0x1c, 0x43, 0x1c, 0x62,
	0x8b, 0x12, 0x83, 0x93, 0x6c, 0x94, 0x74, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e,
	0xae, 0x7e, 0x65, 0x6e, 0x72, 0x62, 0x7a, 0x7e, 0x4a, 0x6e, 0x2a, 0xd4, 0x4b, 0x49, 0x6c, 0x60,
	0x3f, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x0e, 0xfe, 0x71, 0xe9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShortnClient is the client API for Shortn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShortnClient interface {
	// Add page.
	AddPageRpc(ctx context.Context, in *AddPageRequest, opts ...grpc.CallOption) (*AddPageResponse, error)
}

type shortnClient struct {
	cc grpc.ClientConnInterface
}

func NewShortnClient(cc grpc.ClientConnInterface) ShortnClient {
	return &shortnClient{cc}
}

func (c *shortnClient) AddPageRpc(ctx context.Context, in *AddPageRequest, opts ...grpc.CallOption) (*AddPageResponse, error) {
	out := new(AddPageResponse)
	err := c.cc.Invoke(ctx, "/shortn.Shortn/AddPageRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortnServer is the server API for Shortn service.
type ShortnServer interface {
	// Add page.
	AddPageRpc(context.Context, *AddPageRequest) (*AddPageResponse, error)
}

// UnimplementedShortnServer can be embedded to have forward compatible implementations.
type UnimplementedShortnServer struct {
}

func (*UnimplementedShortnServer) AddPageRpc(ctx context.Context, req *AddPageRequest) (*AddPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPageRpc not implemented")
}

func RegisterShortnServer(s *grpc.Server, srv ShortnServer) {
	s.RegisterService(&_Shortn_serviceDesc, srv)
}

func _Shortn_AddPageRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortnServer).AddPageRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortn.Shortn/AddPageRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortnServer).AddPageRpc(ctx, req.(*AddPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Shortn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shortn.Shortn",
	HandlerType: (*ShortnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPageRpc",
			Handler:    _Shortn_AddPageRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortn.proto",
}
